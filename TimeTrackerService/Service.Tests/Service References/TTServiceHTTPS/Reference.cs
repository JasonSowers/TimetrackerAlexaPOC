//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Service.Tests.TTServiceHTTPS {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Users", Namespace="http://schemas.datacontract.org/2004/07/DataServices")]
    [System.SerializableAttribute()]
    public partial class Users : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FName {
            get {
                return this.FNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FNameField, value) != true)) {
                    this.FNameField = value;
                    this.RaisePropertyChanged("FName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LName {
            get {
                return this.LNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LNameField, value) != true)) {
                    this.LNameField = value;
                    this.RaisePropertyChanged("LName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TTServiceHTTPS.ITimeTrackerService")]
    public interface ITimeTrackerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeTrackerService/HelloFriends", ReplyAction="http://tempuri.org/ITimeTrackerService/HelloFriendsResponse")]
        string HelloFriends();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeTrackerService/HelloFriends", ReplyAction="http://tempuri.org/ITimeTrackerService/HelloFriendsResponse")]
        System.Threading.Tasks.Task<string> HelloFriendsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeTrackerService/GetAllUsers", ReplyAction="http://tempuri.org/ITimeTrackerService/GetAllUsersResponse")]
        Service.Tests.TTServiceHTTPS.Users[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeTrackerService/GetAllUsers", ReplyAction="http://tempuri.org/ITimeTrackerService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<Service.Tests.TTServiceHTTPS.Users[]> GetAllUsersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITimeTrackerServiceChannel : Service.Tests.TTServiceHTTPS.ITimeTrackerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TimeTrackerServiceClient : System.ServiceModel.ClientBase<Service.Tests.TTServiceHTTPS.ITimeTrackerService>, Service.Tests.TTServiceHTTPS.ITimeTrackerService {
        
        public TimeTrackerServiceClient() {
        }
        
        public TimeTrackerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TimeTrackerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TimeTrackerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TimeTrackerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HelloFriends() {
            return base.Channel.HelloFriends();
        }
        
        public System.Threading.Tasks.Task<string> HelloFriendsAsync() {
            return base.Channel.HelloFriendsAsync();
        }
        
        public Service.Tests.TTServiceHTTPS.Users[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<Service.Tests.TTServiceHTTPS.Users[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
    }
}
